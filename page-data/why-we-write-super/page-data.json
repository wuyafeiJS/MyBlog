{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-we-write-super/","result":{"data":{"site":{"siteMetadata":{"title":"Trace of Front-end","author":"Yafei Wu"}},"markdownRemark":{"id":"d657ef82-6e3f-547f-8004-3089e6db6e0b","excerpt":"其实这个疑问对于你正常的使用 React 来说并不重要，但如果你想深挖 React 的工作原理，那么你会发现它的有趣之处 第一点 我写的次数比我想到的还多。 当然，新的class fields 提案让我们避免了这段代码： 这种语法在 React 0.1…","html":"<p><strong>其实这个疑问对于你正常的使用 <em>React</em> 来说并不重要，但如果你想深挖 <em>React</em> 的工作原理，那么你会发现它的有趣之处</strong></p>\n<p>第一点</p>\n<hr>\n<p>我写<code class=\"language-text\">super(props)</code>的次数比我想到的还多。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>当然，新的<a href=\"https://github.com/tc39/proposal-class-fields\">class fields 提案</a>让我们避免了这段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这种语法在 React 0.13 版本得到支持。而且这种写法也更加符合人体工学。</p>\n<p>让我们继续回到这个例子，它用到了 es6 的特性：</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></span>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>那么问题来了，<strong>我们为啥要调用 super？ 我们可以不用它吗。如果我们调用它，但是不加 props 会发生什么？它还有其他的参数吗？</strong> 让我们来探索一下。</p>\n<hr>\n<p>在 js 中，<code class=\"language-text\">super</code> 关联到父级 class 的 constructor。（在我们上面的例子中，它指向<code class=\"language-text\">React.Component</code>）</p>\n<p>重点是，我们可以在调用父级<code class=\"language-text\">class constructor</code>后使用 <code class=\"language-text\">this</code>。也就是在<code class=\"language-text\">super()</code>之前是不能用<code class=\"language-text\">this</code>的：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Components</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//🔴 这里还不能使用`this`</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 这里就可以使用了</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们有个很好的理由去解释为啥 Javascript 强制 调用父级 constructor 要在使用 this 前执行。我们想想 class 的层级：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PolitePerson</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🔴 这是不被允许的</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good morning folks'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>想象一下，如果我们可以在<code class=\"language-text\">super</code>之前调用 this。一段时间后，我们可能需要修改下<code class=\"language-text\">greetColleagues</code>，如在这个函数里面调用<code class=\"language-text\">this.name</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">greetColleagues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good morning folks!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">', nice to meet you!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是我们忘了 <code class=\"language-text\">this.greetColleagues()</code> 是在 super 之前调用了，这时候<code class=\"language-text\">this.name</code>压根不存在。如你所见，这种代码是很蠢的。</p>\n<p>为了避免这个陷阱， <strong>JS 强制在调用<code class=\"language-text\">this</code>前先得调用<code class=\"language-text\">super</code>.</strong> 这个限制同样应用到了 React Components:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ✅ Okay to use `this` now</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isOn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这段代码给我们留下了另一个疑问： 为什么让 props 作为 super 的参数？</p>\n<hr>\n<p>你可能会想，让<code class=\"language-text\">props</code>作为<code class=\"language-text\">super</code>的参数之所以需要，是因为这样 基础的<code class=\"language-text\">React.Component</code> 的 <code class=\"language-text\">constructor</code> 能够初始化 <code class=\"language-text\">this.props</code>，像这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React的内部操作， React.Component对象</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你如果这样想，那么你离真相不远了，这就是<a href=\"https://github.com/facebook/react/blob/1d25aa5787d4e19704c049c3cfa985d3b5190e0d/packages/react/src/ReactBaseClasses.js#L22\">React 源码的操作</a>.</p>\n<p>但是有些时候，你调用<code class=\"language-text\">super()</code>但是不传入<code class=\"language-text\">props</code>，你依旧可以在<code class=\"language-text\">render</code>或者其他方法里面使用<code class=\"language-text\">this.props</code>。</p>\n<p>那么它是如何工作的呢？ 这就引出了 <strong>当调用<code class=\"language-text\">constructor</code>之后，React 也会在实例上立即分配<code class=\"language-text\">props</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React 内部</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YourComponent</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\ninstance<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props</code></pre></div>\n<p>所以，就算你在写<code class=\"language-text\">super()</code>的时候忘了传入 props，React 依旧会在之后设置它们。下面说下这么做的原因。</p>\n<p>React 新增了对 classes 的支持，它不仅仅只是为了支持 es6 的 classes 。我们的目标是支持尽可能多的 class 抽象。我们<a href=\"https://reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages\">并不清楚</a> ClojureScript, CoffeeScript, ES6, Fable, Scala.js, TypeScript, 和一些其他的语言 它们对组件的定义，哪一种相对来说会比较成功。所以 React 故意忽略了是否必须调用 super()这一问题 - 尽管 es6 是必须调用的。</p>\n<p>那么，这是否意味着你只需写<code class=\"language-text\">super()</code>来代替<code class=\"language-text\">super(props)</code>呢？</p>\n<p><strong>答案可能是否定的，因为这里仍有疑问</strong> 当然，React 会在执行 constructor 之后立刻分发 <code class=\"language-text\">this.props</code>。 但是<code class=\"language-text\">this.props</code>在调用<code class=\"language-text\">super</code> 和 执行完 constructor 之间 仍然是 undefined：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React 内部</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 你的代码</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果这里忘了加props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果在 constructor 中某个方法调用了<code class=\"language-text\">this.props</code>，上面的写法就会给 debug 带来很大的挑战。\n<strong>这就是我为啥建议每次都得写<code class=\"language-text\">super(props)</code>的原因，虽然它不是必须的：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Button</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ We passed props</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ {}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ {}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样就能保证在 constructor 诞生之前就设置了<code class=\"language-text\">this.props</code>。</p>\n<hr>\n<p>长期以来，React 使用者可能会有一点疑惑。</p>\n<p>大家可能注意到，在 classes 中使用 <code class=\"language-text\">context api</code> (不管是旧的 <code class=\"language-text\">contextTypes</code>还是在 React16.6 中新增的新的<code class=\"language-text\">contextType</code> API), <code class=\"language-text\">context</code> 都是作为 constructor 的第二个参数。</p>\n<p>所以为啥我们不提倡像 <code class=\"language-text\">super(props, context)</code> 这种写法呢？ 其实这种写法也没问题，但是<code class=\"language-text\">context</code>使用量较少所以这样的陷阱遇到的不多。</p>\n<p><strong>随着 class fields 提案的诞生，这个陷进已经几乎消失。</strong> 现在我们压根不需要写 constructor, 所有的参数都会被自动添加，所以现在我们直接这样写： <code class=\"language-text\">state={}</code>，然后可以在里面直接调用<code class=\"language-text\">this.props</code> 或 <code class=\"language-text\">this.context</code>。</p>\n<p>最后，随着 Hooks 的诞生， 我们现在甚至都不要<code class=\"language-text\">super</code> 和 <code class=\"language-text\">this</code>。 不过这就是下个话题了。</p>","timeToRead":7,"frontmatter":{"title":"为何要写super(props)?","date":"November 30, 2018"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/why-we-write-super/","previous":null,"next":{"fields":{"slug":"/how-to-build-a-easy-blog/"},"frontmatter":{"title":"三分钟建成个人网站，逼格极高（持续集成）"}}}}}